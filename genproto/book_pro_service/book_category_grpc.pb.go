// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package book_pro_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BookCategoryServiceClient is the client API for BookCategoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookCategoryServiceClient interface {
	CreateBookCategory(ctx context.Context, in *BookCategory, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateBookCategory(ctx context.Context, in *BookCategory, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetBookCategoryList(ctx context.Context, in *GetBookCategoryListReq, opts ...grpc.CallOption) (*GetBookCategoryListRes, error)
	GetBookCategory(ctx context.Context, in *ById, opts ...grpc.CallOption) (*BookCategory, error)
	DeleteBookCategory(ctx context.Context, in *ById, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type bookCategoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBookCategoryServiceClient(cc grpc.ClientConnInterface) BookCategoryServiceClient {
	return &bookCategoryServiceClient{cc}
}

func (c *bookCategoryServiceClient) CreateBookCategory(ctx context.Context, in *BookCategory, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/book_pro_service.BookCategoryService/CreateBookCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookCategoryServiceClient) UpdateBookCategory(ctx context.Context, in *BookCategory, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/book_pro_service.BookCategoryService/UpdateBookCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookCategoryServiceClient) GetBookCategoryList(ctx context.Context, in *GetBookCategoryListReq, opts ...grpc.CallOption) (*GetBookCategoryListRes, error) {
	out := new(GetBookCategoryListRes)
	err := c.cc.Invoke(ctx, "/book_pro_service.BookCategoryService/GetBookCategoryList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookCategoryServiceClient) GetBookCategory(ctx context.Context, in *ById, opts ...grpc.CallOption) (*BookCategory, error) {
	out := new(BookCategory)
	err := c.cc.Invoke(ctx, "/book_pro_service.BookCategoryService/GetBookCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookCategoryServiceClient) DeleteBookCategory(ctx context.Context, in *ById, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/book_pro_service.BookCategoryService/DeleteBookCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookCategoryServiceServer is the server API for BookCategoryService service.
// All implementations must embed UnimplementedBookCategoryServiceServer
// for forward compatibility
type BookCategoryServiceServer interface {
	CreateBookCategory(context.Context, *BookCategory) (*emptypb.Empty, error)
	UpdateBookCategory(context.Context, *BookCategory) (*emptypb.Empty, error)
	GetBookCategoryList(context.Context, *GetBookCategoryListReq) (*GetBookCategoryListRes, error)
	GetBookCategory(context.Context, *ById) (*BookCategory, error)
	DeleteBookCategory(context.Context, *ById) (*emptypb.Empty, error)
	mustEmbedUnimplementedBookCategoryServiceServer()
}

// UnimplementedBookCategoryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBookCategoryServiceServer struct {
}

func (UnimplementedBookCategoryServiceServer) CreateBookCategory(context.Context, *BookCategory) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBookCategory not implemented")
}
func (UnimplementedBookCategoryServiceServer) UpdateBookCategory(context.Context, *BookCategory) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBookCategory not implemented")
}
func (UnimplementedBookCategoryServiceServer) GetBookCategoryList(context.Context, *GetBookCategoryListReq) (*GetBookCategoryListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBookCategoryList not implemented")
}
func (UnimplementedBookCategoryServiceServer) GetBookCategory(context.Context, *ById) (*BookCategory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBookCategory not implemented")
}
func (UnimplementedBookCategoryServiceServer) DeleteBookCategory(context.Context, *ById) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBookCategory not implemented")
}
func (UnimplementedBookCategoryServiceServer) mustEmbedUnimplementedBookCategoryServiceServer() {}

// UnsafeBookCategoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookCategoryServiceServer will
// result in compilation errors.
type UnsafeBookCategoryServiceServer interface {
	mustEmbedUnimplementedBookCategoryServiceServer()
}

func RegisterBookCategoryServiceServer(s grpc.ServiceRegistrar, srv BookCategoryServiceServer) {
	s.RegisterService(&BookCategoryService_ServiceDesc, srv)
}

func _BookCategoryService_CreateBookCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookCategory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookCategoryServiceServer).CreateBookCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book_pro_service.BookCategoryService/CreateBookCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookCategoryServiceServer).CreateBookCategory(ctx, req.(*BookCategory))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookCategoryService_UpdateBookCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookCategory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookCategoryServiceServer).UpdateBookCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book_pro_service.BookCategoryService/UpdateBookCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookCategoryServiceServer).UpdateBookCategory(ctx, req.(*BookCategory))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookCategoryService_GetBookCategoryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBookCategoryListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookCategoryServiceServer).GetBookCategoryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book_pro_service.BookCategoryService/GetBookCategoryList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookCategoryServiceServer).GetBookCategoryList(ctx, req.(*GetBookCategoryListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookCategoryService_GetBookCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookCategoryServiceServer).GetBookCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book_pro_service.BookCategoryService/GetBookCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookCategoryServiceServer).GetBookCategory(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookCategoryService_DeleteBookCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookCategoryServiceServer).DeleteBookCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book_pro_service.BookCategoryService/DeleteBookCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookCategoryServiceServer).DeleteBookCategory(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

// BookCategoryService_ServiceDesc is the grpc.ServiceDesc for BookCategoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BookCategoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "book_pro_service.BookCategoryService",
	HandlerType: (*BookCategoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBookCategory",
			Handler:    _BookCategoryService_CreateBookCategory_Handler,
		},
		{
			MethodName: "UpdateBookCategory",
			Handler:    _BookCategoryService_UpdateBookCategory_Handler,
		},
		{
			MethodName: "GetBookCategoryList",
			Handler:    _BookCategoryService_GetBookCategoryList_Handler,
		},
		{
			MethodName: "GetBookCategory",
			Handler:    _BookCategoryService_GetBookCategory_Handler,
		},
		{
			MethodName: "DeleteBookCategory",
			Handler:    _BookCategoryService_DeleteBookCategory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "book_category.proto",
}
